openapi: 3.0.3
info:
  title: API ME
  description: API ME
  version: 1.0.0
servers:
  - url: 'http://localhost:3000/api/latest/'

# Define common JSON data format
components:
  schemas:
    CarInfo:
      type: "object"
      properties:
        carID:
          type: "integer"
        carName:
          type: "string"
        maker:
          $ref: "#/components/schemas/MakerInfo"

    MakerInfo:
      type: "object"
      properties:
        makerID:
          type: "integer"
        makerName:
          type: "string"

    PostInfo:
      type: "object"
      properties:
        postID:
          type: "integer"
        title:
          type: "string"
        content:
          type: "string"
        year:
          type: "integer"
        mileage:
          type: "integer"
        price:
          type: "integer"
        author:
          $ref: "#/components/schemas/UserInfo"
        carInfo:
          $ref: "#/components/schemas/CarInfo"

    Result:
      type: "object"
      properties:
        result:
          type: "string"
        message:
          type: "string"

    Role:
      type: "object"
      properties:
        roleID:
          type: "integer"
        roleName:
          type: "string"

    UserInfo:
      type: "object"
      properties:
        userName:
          type: "string"
        password:
          type: "string"
        fullName:
          type: "string"
        email:
          type: "string"
        role:
          $ref: "#/components/schemas/Role"

tags:
  - name: Auth
    description: Authentication
  - name: Users
    description: User Management
  - name: Roles
    description: Role Management
  - name: Makers
    description: Maker Management
  - name: Cars
    description: Car Management
  - name: Posts
    description: Post Management

paths:

  /users:
    get:
      description: "Get all users"
      tags: [Users]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserInfo"
        "500":
          description: "Internal server error"
      security:
        - api_key: []

    post:
      description: "Create a new user"
      tags: [Users]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInfo"

      responses:
        "200":
          description: "OK"
        "400":
          description: "Invalid username/password supplied"
        "500":
          description: "Internal server error"

  /users/{userName}:
    get:
      description: "Get user by userName"
      tags: [Users]
      parameters:
        - name: userName
          in: path
          description: "userName"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
        "404":
          description: "User not found"
        "500":
          description: "Internal server error"

    put:
      description: "Update user by userName"
      tags: [Users]
      parameters:
        - name: userName
          in: path
          description: "userName"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInfo"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
        "404":
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Result"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Result"
    delete:
      description: "Delete user by id"
      tags: [Users]
      parameters:
        - name: userName
          in: path
          description: "User id"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Result"
        "404":
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Result"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Result"
  /roles:
    get:
      description: "Get all roles"
      tags: [Roles]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Role"
        "500":
          description: "Internal server error"
      security:
        - api_key: []

  /roles/{id}:
    get:
      description: "Get role by id"
      tags: [Roles]
      parameters:
        - name: id
          in: path
          description: "Role id"
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        "404":
          description: "Role not found"
        "500":
          description: "Internal server error"

  /auth:
    get:
      summary: "Acheck already login"
      description: ""
      tags: [ Auth ]
      responses:
        "200":
          description: "OK"
        "404":
          description: "Not logged in"
        "500":
          description: "Internal server error"

  /auth/login:
    post:
      summary: "User Login"
      description: ""
      tags: [Auth]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: "string"
                password:
                  type: "string"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Invalid name or data"
        "500":
          description: "Internal server error"

  /auth/logout:
    get:
      summary: "User Logout"
      description: ""
      tags: [ Auth ]
      responses:
        "200":
          description: "OK"
        "500":
          description: "Internal server error"

  /makers:
    get:
      description: "Get all makers"
      tags: [Makers]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/MakerInfo"
        "500":
          description: "Internal server error"
      security:
        - api_key: []

  /makers/{id}:
    get:
      description: "Get maker by id"
      tags: [Makers]
      parameters:
        - name: id
          in: path
          description: "Maker id"
          required: true
          schema:
              type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MakerInfo"
        "404":
          description: "Maker not found"
        "500":
          description: "Internal server error"
      security:
        - api_key: []

  /cars:
    get:
      description: "Get all cars"
      tags: [Cars]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CarInfo"
        "500":
          description: "Internal server error"
      security:
        - api_key: []

  /cars/{id}:
    get:
      description: "Get car by id"
      tags: [Cars]
      parameters:
        - name: id
          in: path
          description: "Car id"
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CarInfo"
        "404":
          description: "Car not found"
        "500":
          description: "Internal server error"
      security:
        - api_key: []

  /posts:
    get:
      description: "Get all posts"
      tags: [Posts]
      parameters:
        - name: userName
          in: query
          description: "User name"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PostInfo"
        "500":
          description: "Internal server error"
      security:
        - api_key: []

    post:
      description: "Create a new post"
      tags: [Posts]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostInfo"
      responses:
        "200":
          description: "OK"
        "500":
          description: "Internal server error"
      security:
        - api_key: []

  /posts/{id}:
    get:
      description: "Get post by id"
      tags: [Posts]
      parameters:
        - name: id
          in: path
          description: "Post id"
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
          content:
              application/json:
                schema:
                  $ref: "#/components/schemas/PostInfo"
        "404":
          description: "Post not found"
        "500":
          description: "Internal server error"
      security:
        - api_key: []

    put:
      description: "Update post by id"
      tags: [Posts]
      parameters:
        - name: id
          in: path
          description: "Post id"
          required: true
          schema:
              type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostInfo"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostInfo"
        "404":
          description: "Post not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Result"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Result"
      security:
          - api_key: []

    delete:
      description: "Delete post by id"
      tags: [Posts]
      parameters:
        - name: id
          in: path
          description: "Post id"
          required: true
          schema:
              type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Result"
        "404":
          description: "Post not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Result"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Result"
      security:
        - api_key: []
