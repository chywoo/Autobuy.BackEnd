openapi: 3.0.3
info:
  title: API ME
  description: API ME
  version: 1.0.0
servers:
  - url: 'http://localhost:3000/api/latest/'

# Define common JSON data format
components:
  schemas:
    CarInfo:
      type: "object"
      properties:
        carID:
          type: "integer"
        carModel:
          type: "string"
        makeID:
          type: "integer"
        imageURL:
          type: "string"
        make:
          $ref: "#/components/schemas/MakeInfo"

    MakeInfo:
      type: "object"
      properties:
        makeID:
          type: "integer"
        makeName:
          type: "string"

    PostInfo:
      type: "object"
      description: "When creating a new post, you don't have to set the postID, author and car fields. They are ignored."
      properties:
        postID:
          type: "integer"
        title:
          type: "string"
        description:
          type: "string"
        year:
          type: "integer"
        mileage:
          type: "integer"
        condition:
          type: "string"
        price:
          type: "integer"
        userName:
          type: "string"
        carID:
          type: "integer"
        author:
          $ref: "#/components/schemas/UserInfo"
        car:
          $ref: "#/components/schemas/CarInfo"

    PostList:
        type: "object"
        properties:
            total:
              type: "integer"
            pageSize:
              type: "integer"
            page:
              type: "integer"
            posts:
              type: "array"
              items:
                $ref: "#/components/schemas/PostInfo"

    Result:
      type: "object"
      properties:
        result:
          type: "string"
        message:
          type: "string"

    Role:
      type: "object"
      properties:
        roleID:
          type: "integer"
        roleName:
          type: "string"

    UserInfo:
      type: "object"
      properties:
        userName:
          type: "string"
        password:
          type: "string"
        fullName:
          type: "string"
        email:
          type: "string"
        roleID:
          type: "integer"

    UserDetailInfo:
      type: "object"
      properties:
        userName:
          type: "string"
        password:
          type: "string"
        fullName:
          type: "string"
        email:
          type: "string"
        roleID:
          type: "integer"
        role:
          $ref: "#/components/schemas/Role"

    UserList:
      type: "object"
      properties:
        total:
          type: "integer"
        pageSize:
          type: "integer"
        page:
          type: "integer"
        users:
          type: "array"
          items:
            $ref: "#/components/schemas/UserDetailInfo"

tags:
  - name: Auth
    description: Authentication
  - name: Users
    description: User Management
  - name: Roles
    description: Role Management
  - name: Makes
    description: Make Management
  - name: Cars
    description: Car Management
  - name: Posts
    description: Post Management

paths:

  /users:
    get:
      summary: "Get all users"
      description: "Get all users"
      tags: [Users]
      parameters:
        - name: pageSize
          in: query
          description: "number of posts per page, Default is 10."
          required: false
          schema:
            type: integer
        - name: page
          in: query
          description: "page number, Default is 0."
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserInfo"
        "500":
          description: "Internal server error"

    post:
      summary: "Create a new user."
      description: "Create a new user."
      tags: [Users]
      requestBody:
        description: "When creating a new user, you don't have to set the role field. It is ignored."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInfo"

      responses:
        "200":
          description: "OK. If the result is not OK, the message field will contain the error message."
        "201":
          description: "Created a new user"
        "400":
          description: "Invalid username/password supplied"
        "500":
          description: "Internal server error"

  /users/{userName}:
    get:
      summary: "Get user by userName"
      description: "Get user by userName"
      tags: [Users]
      parameters:
        - name: userName
          in: path
          description: "userName"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
        "400":
          description: "Bad request"
        "404":
          description: "User not found"
        "500":
          description: "Internal server error"

    put:
      summary: "Update user by userName"
      description: "Update user by userName"
      tags: [Users]
      parameters:
        - name: userName
          in: path
          description: "userName"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInfo"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
        "400":
          description: "Bad request"
        "404":
          description: "User not found"
        "500":
          description: "Internal server error"
    delete:
      summary: "Delete user by id"
      description: "Delete user by id"
      tags: [Users]
      parameters:
        - name: userName
          in: path
          description: "User id"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
        "404":
          description: "User not found"
        "500":
          description: "Internal server error"

  /roles:
    post:
      summary: "Create a new role."
      description: "Create a new role."
      tags: [Roles]
      requestBody:
        description: "When creating a new role, you don't have to set the roleID field. It is ignored."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Role"

      responses:
          "200":
            description: "OK. If the result is not OK, the message field will contain the error message."
          "201":
            description: "Created a new role"
          "400":
            description: "Invalid role name supplied"
          "500":
            description: "Internal server error"
    get:
      summary: "Get all roles"
      description: "Get all roles"
      tags: [Roles]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Role"
        "500":
          description: "Internal server error"
      security:
        - api_key: []

  /roles/{id}:
    get:
      summary: "Get role by id"
      description: "Get role by id"
      tags: [Roles]
      parameters:
        - name: id
          in: path
          description: "Role id"
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        "404":
          description: "Role not found"
        "500":
          description: "Internal server error"
    delete:
      summary: "Delete role by id"
      description: "Delete role by id"
      tags: [Roles]
      parameters:
        - name: id
          in: path
          description: "Role id"
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
        "404":
          description: "Role not found"
        "500":
          description: "Internal server error"

  /roles/{id}/users:
    get:
      summary: "Get all users of a role"
      description: "Get all users of a role"
      tags: [Roles]
      parameters:
        - name: id
          in: path
          description: "Role id"
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserInfo"
        "404":
          description: "Role not found"
        "500":
          description: "Internal server error"

  /auth:
    get:
      summary: "Check already login"
      description: ""
      tags: [ Auth ]
      responses:
        "200":
          description: "OK"
        "401":
          description: "Not logged in"
        "500":
          description: "Internal server error"

  /auth/login:
    post:
      summary: "User Login"
      description: ""
      tags: [Auth]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: "string"
                password:
                  type: "string"
      responses:
        "201":
          description: "Created"
        "400":
          description: "Invalid name or data"
        "500":
          description: "Internal server error"

  /auth/logout:
    get:
      summary: "User Logout"
      description: ""
      tags: [Auth]
      responses:
        "200":
          description: "OK"
        "500":
          description: "Internal server error"

  /makes:
    get:
      summary: "Get all makes"
      description: "Get all makes"
      tags: [Makes]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/MakeInfo"
        "500":
          description: "Internal server error"

  /makes/{id}:
    get:
      summary: "Get make by id"
      description: "Get make by id"
      tags: [Makes]
      parameters:
        - name: id
          in: path
          description: "Make id"
          required: true
          schema:
              type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MakeInfo"
        "404":
          description: "Make not found"
        "500":
          description: "Internal server error"
      security:
        - api_key: []

  /cars:
    get:
      summary: "Get all cars"
      description: "Get all cars"
      tags: [Cars]
      parameters:
        - name: makeID
          in: query
          description: "Make ID"
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CarInfo"
        "500":
          description: "Internal server error"
      security:
        - api_key: []

  /cars/{id}:
    get:
      summary: "Get car by id"
      description: "Get car by id"
      tags: [Cars]
      parameters:
        - name: id
          in: path
          description: "Car id"
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CarInfo"
        "404":
          description: "Car not found"
        "500":
          description: "Internal server error"
      security:
        - api_key: []

  /posts:
    get:
      summary: "Get all posts"
      description: "Get all posts"
      tags: [Posts]
      parameters:
        - name: pageSize
          in: query
          description: "number of posts per page, Default is 10."
          required: false
          schema:
            type: integer
        - name: page
          in: query
          description: "page number, Default is 0."
          required: false
          schema:
            type: integer
        - name: userName
          in: query
          description: "User name"
          required: false
          schema:
            type: string
        - name: makeID
          in: query
          description: "Make ID"
          required: false
          schema:
            type: integer
        - name: carID
          in: query
          description: "Car ID"
          required: false
          schema:
            type: integer
        - name: maxPrice
          in: query
          description: "Max price"
          required: false
          schema:
            type: integer
        - name: maxYear
          in: query
          description: "Max year"
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                items:
                  $ref: "#/components/schemas/PostList"
        "500":
          description: "Internal server error"
      security:
        - api_key: []

    post:
      summary: "Create a new post"
      description: "Create a new post"
      tags: [Posts]
      requestBody:
        description: "When creating a new post, you don't have to set the postID, author and car fields. They are ignored."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostInfo"
      responses:
        "201":
          description: "Created a new post"
        "400":
          description: "Post information is invalid"
        "403":
          description: "Forbidden"
        "500":
          description: "Internal server error"
      security:
        - api_key: []

  /posts/{id}:
    get:
      summary: "Get post by id"
      description: "Get post by id"
      tags: [Posts]
      parameters:
        - name: id
          in: path
          description: "Post id"
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
          content:
              application/json:
                schema:
                  $ref: "#/components/schemas/PostInfo"
        "404":
          description: "Post not found"
        "500":
          description: "Internal server error"
      security:
        - api_key: []

    put:
      summary: "Update post by id"
      description: "Update post by id"
      tags: [Posts]
      parameters:
        - name: id
          in: path
          description: "Post id"
          required: true
          schema:
              type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostInfo"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostInfo"
        "404":
          description: "Post not found"
        "500":
          description: "Internal server error"
      security:
          - api_key: []

    delete:
      summary: "Delete post by id"
      description: "Delete post by id"
      tags: [Posts]
      parameters:
        - name: id
          in: path
          description: "Post id"
          required: true
          schema:
              type: integer
      responses:
        "200":
          description: "OK"
        "404":
          description: "Post not found"
        "500":
          description: "Internal server error"
